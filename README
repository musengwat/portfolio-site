# üöÄ Complete Portfolio Website Deployment Guide

This guide covers deployment options for both frontend and backend components of the portfolio website.

## üìã Pre-Deployment Checklist

### Frontend
- [ ] Build passes (`npm run build`)
- [ ] All environment variables configured
- [ ] Assets optimized and compressed
- [ ] PWA manifest configured
- [ ] SEO meta tags updated
- [ ] Analytics tracking code added

### Backend
- [ ] All tests pass (`npm test`)
- [ ] Database connection configured
- [ ] Environment variables set
- [ ] Email service configured
- [ ] Rate limiting configured
- [ ] Security headers enabled

## üåê Frontend Deployment Options

### Option 1: Netlify (Recommended for Static Sites)

1. **Build the project:**
   ```bash
   cd portfolio-frontend
   npm run build
   ```

2. **Deploy via Netlify CLI:**
   ```bash
   npm install -g netlify-cli
   netlify login
   netlify init
   netlify deploy --prod
   ```

3. **netlify.toml configuration:**
   ```toml
   [build]
     publish = "dist"
     command = "npm run build"
   
   [build.environment]
     NODE_VERSION = "18"
   
   [[redirects]]
     from = "/*"
     to = "/index.html"
     status = 200
   
   [[headers]]
     for = "/*"
     [headers.values]
       X-Frame-Options = "DENY"
       X-XSS-Protection = "1; mode=block"
       X-Content-Type-Options = "nosniff"
   
   [[headers]]
     for = "/assets/*"
     [headers.values]
       Cache-Control = "public, max-age=31536000, immutable"
   ```

4. **Environment Variables in Netlify:**
   - Go to Site settings ‚Üí Environment variables
   - Add:
     - `VITE_API_URL=https://your-backend-url.herokuapp.com/api`
     - `VITE_EMAILJS_SERVICE_ID=your_service_id`
     - `VITE_EMAILJS_TEMPLATE_ID=your_template_id`
     - `VITE_EMAILJS_PUBLIC_KEY=your_public_key`

### Option 2: Vercel

1. **Install Vercel CLI:**
   ```bash
   npm install -g vercel
   ```

2. **Deploy:**
   ```bash
   cd portfolio-frontend
   vercel --prod
   ```

3. **vercel.json configuration:**
   ```json
   {
     "buildCommand": "npm run build",
     "outputDirectory": "dist",
     "framework": "vite",
     "env": {
       "VITE_API_URL": "@vite_api_url",
       "VITE_EMAILJS_SERVICE_ID": "@vite_emailjs_service_id"
     },
     "routes": [
       {
         "src": "/assets/(.*)",
         "headers": { "cache-control": "s-maxage=31536000,immutable" },
         "continue": true
       },
       { "handle": "filesystem" },
       { "src": "/.*", "dest": "/index.html" }
     ]
   }
   ```

### Option 3: GitHub Pages

1. **Install gh-pages:**
   ```bash
   npm install --save-dev gh-pages
   ```

2. **Add deploy script to package.json:**
   ```json
   {
     "scripts": {
       "deploy": "npm run build && gh-pages -d dist"
     }
   }
   ```

3. **Deploy:**
   ```bash
   npm run deploy
   ```

## üñ•Ô∏è Backend Deployment Options

### Option 1: Railway (Recommended)

1. **Install Railway CLI:**
   ```bash
   npm install -g @railway/cli
   ```

2. **Login and deploy:**
   ```bash
   cd portfolio-backend
   railway login
   railway init
   railway up
   ```

3. **Environment Variables:**
   ```bash
   railway variables set PORT=5000
   railway variables set MONGODB_URI="your_mongodb_connection_string"
   railway variables set JWT_SECRET="your_jwt_secret"
   railway variables set EMAIL_USER="your_email@gmail.com"
   railway variables set EMAIL_PASS="your_app_password"
   ```

### Option 2: Heroku

1. **Install Heroku CLI and login:**
   ```bash
   heroku login
   ```

2. **Create Heroku app:**
   ```bash
   cd portfolio-backend
   heroku create your-portfolio-backend
   ```

3. **Add MongoDB Atlas addon:**
   ```bash
   heroku addons:create mongolab:sandbox
   ```

4. **Set environment variables:**
   ```bash
   heroku config:set NODE_ENV=production
   heroku config:set JWT_SECRET=your_jwt_secret_here
   heroku config:set EMAIL_USER=your_email@gmail.com
   heroku config:set EMAIL_PASS=your_app_password
   ```

5. **Deploy:**
   ```bash
   git add .
   git commit -m "Deploy to Heroku"
   git push heroku main
   ```

6. **Procfile:**
   ```
   web: node server.js
   ```

### Option 3: DigitalOcean App Platform

1. **Create app.yaml:**
   ```yaml
   name: portfolio-backend
   services:
   - name: api
     source_dir: /
     github:
       repo: your-username/portfolio-backend
       branch: main
     run_command: npm start
     environment_slug: node-js
     instance_count: 1
     instance_size_slug: basic-xxs
     envs:
     - key: NODE_ENV
       value: production
     - key: PORT
       value: "8080"
   databases:
   - name: portfolio-db
     engine: MONGODB
     version: "5"
   ```

## üóÑÔ∏è Database Setup

### MongoDB Atlas (Recommended)

1. **Create account at [MongoDB Atlas](https://www.mongodb.com/atlas)**

2. **Create new cluster:**
   - Choose free tier (M0)
   - Select region closest to your backend
   - Create cluster

3. **Setup database user:**
   - Go to Database Access
   - Add new database user
   - Choose password authentication
   - Save username and password

4. **Configure network access:**
   - Go to Network Access
   - Add IP address (0.0.0.0/0 for all IPs)
   - Or add your backend server's IP

5. **Get connection string:**
   - Go to Clusters ‚Üí Connect
   - Choose "Connect your application"
   - Copy MongoDB URI
   - Replace `<password>` with your database user password

### Local MongoDB (Development)

```bash
# Install MongoDB locally
# macOS
brew install mongodb-community

# Ubuntu
sudo apt-get install mongodb

# Start MongoDB
brew services start mongodb-community  # macOS
sudo systemctl start mongod            # Ubuntu

# Connection string for local development
MONGODB_URI=mongodb://localhost:27017/portfolio
```

## üìß Email Service Setup

### Gmail with App Password (Recommended)

1. **Enable 2-factor authentication on your Google account**

2. **Generate app password:**
   - Go to Google Account settings
   - Security ‚Üí App passwords
   - Generate password for "Mail"
   - Use this password in EMAIL_PASS

3. **Environment variables:**
   ```bash
   EMAIL_HOST=smtp.gmail.com
   EMAIL_PORT=587
   EMAIL_USER=your.email@gmail.com
   EMAIL_PASS=your_16_character_app_password
   ```

### SendGrid Alternative

1. **Create SendGrid account**

2. **Get API key:**
   - Go to Settings ‚Üí API Keys
   - Create new API key with full access

3. **Update email service to use SendGrid:**
   ```javascript
   // In emailService.js
   const sgMail = require('@sendgrid/mail');
   sgMail.setApiKey(process.env.SENDGRID_API_KEY);
   ```

## üîß Environment Variables Reference

### Frontend (.env)
```bash
# API Configuration
VITE_API_URL=https://your-backend-url.com/api

# EmailJS Configuration (for contact form)
VITE_EMAILJS_SERVICE_ID=your_service_id
VITE_EMAILJS_TEMPLATE_ID=your_template_id
VITE_EMAILJS_PUBLIC_KEY=your_public_key

# Analytics
VITE_GA_TRACKING_ID=G-XXXXXXXXXX

# Environment
VITE_NODE_ENV=production
```

### Backend (.env)
```bash
# Server Configuration
PORT=5000
NODE_ENV=production

# Database
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/portfolio

# Authentication
JWT_SECRET=your_super_secret_jwt_key_here
JWT_EXPIRE=30d

# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your.email@gmail.com
EMAIL_PASS=your_app_password
ADMIN_EMAIL=admin@yourdomain.com

# Frontend URL (for email links)
FRONTEND_URL=https://your-portfolio-domain.com
ADMIN_URL=https://your-portfolio-domain.com/admin

# File Upload
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# Security
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
CONTACT_RATE_LIMIT_MAX=5
```

## üîí Security Considerations

### SSL/HTTPS
- Use HTTPS in production (automatically provided by Netlify/Vercel)
- Update CORS origins to use HTTPS URLs
- Set secure cookie flags in production

### Environment Variables
- Never commit `.env` files to git
- Use platform-specific environment variable systems
- Rotate secrets regularly

### Database Security
- Use strong passwords
- Enable MongoDB authentication
- Restrict network access to known IPs
- Regular backups

## üìä Monitoring and Analytics

### Frontend Analytics
1. **Google Analytics 4:**
   ```javascript
   // Add to index.html
   <script async src="https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX"></script>
   <script>
     window.dataLayer = window.dataLayer || [];
     function gtag(){dataLayer.push(arguments);}
     gtag('js', new Date());
     gtag('config', 'G-XXXXXXXXXX');
   </script>
   ```

### Backend Monitoring
1. **Uptime monitoring with UptimeRobot**
2. **Error tracking with Sentry**
3. **Performance monitoring with New Relic**

## üö® Troubleshooting

### Common Frontend Issues
- **Build fails:** Check for TypeScript errors, missing dependencies
- **Environment variables not working:** Ensure they start with `VITE_`
- **Routing issues:** Configure redirects for SPA routing

### Common Backend Issues
- **Database connection fails:** Check MongoDB URI and network access
- **Email not sending:** Verify SMTP credentials and enable less secure apps
- **CORS errors:** Update CORS origins to include frontend domain

### Performance Issues
- **Slow loading:** Implement code splitting and lazy loading
- **Large bundle size:** Analyze with `npm run analyze`
- **Poor lighthouse scores:** Optimize images and implement PWA features

## üìà Post-Deployment Tasks

1. **Test all functionality:**
   - Contact form submission
   - Email notifications
   - Admin panel access
   - Mobile responsiveness

2. **Set up monitoring:**
   - Uptime monitoring
   - Error tracking
   - Performance monitoring

3. **Configure backups:**
   - Database backups
   - Code repository backups

4. **Update DNS:**
   - Point domain to deployment
   - Configure SSL certificates

5. **SEO setup:**
   - Submit sitemap to search engines
   - Configure Google Search Console
   - Set up Google Analytics

## üîÑ Continuous Deployment

### GitHub Actions (CI/CD)
```yaml
# .github/workflows/deploy.yml
name: Deploy Portfolio

on:
  push:
    branches: [main]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install and build
        run: |
          cd portfolio-frontend
          npm ci
          npm run build
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './portfolio-frontend/dist'
          production-branch: main
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to Railway
        uses: railway-app/railway-cli@v2
        with:
          command: railway up
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
```

This deployment guide provides multiple options for hosting your portfolio website. Choose the platforms that best fit your needs and budget. The recommended combination is Netlify for frontend and Railway for backend, as they offer excellent free tiers and easy deployment processes.